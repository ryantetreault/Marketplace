DROP DATABASE IF EXISTS marketplace_db;

CREATE DATABASE marketplace_db;
USE marketplace_db;

CREATE table user
(
	user_id int primary key auto_increment,
    first_name varchar(25) not null,
    last_name varchar(25) not null,
    email varchar(255),
    username varchar(255) unique not null,
    average_rating double,
    password varchar(255) not null
)auto_increment = 1;

CREATE table user_archive
(
	user_id int primary key auto_increment,
    first_name varchar(25) not null,
    last_name varchar(25) not null,
    email varchar(255),
    username varchar(255) unique not null,
    average_rating double,
    is_active boolean
)auto_increment = 1;

CREATE table location
(
	location_id int primary key auto_increment,
    name varchar(50) not null,
    address varchar(255) not null,
    latitude double,
    longitude double
)auto_increment = 1;

-- do we want a whole category table?
CREATE table category
(
	category_id int primary key auto_increment,
    name varchar(50)
)auto_increment = 1;

CREATE Table item
(
	item_id int primary key auto_increment,
    name varchar(50),
    description varchar(150),
    price double not null,
    user_id int,
    category_id int,
    release_date date default (current_date),
    available bit(1),
    location_id int,
    item_type varchar(50) not null,
    image_name varchar(255),
    image_type varchar(100),
    image_date LONGBLOB,

	CONSTRAINT user_id_fk FOREIGN KEY (user_id) REFERENCES user(user_id)
		ON DELETE CASCADE -- if a user, all the items they own (have listed) are deleted
        ON UPDATE CASCADE,

    CONSTRAINT location_id_fk FOREIGN KEY (location_id) REFERENCES location(location_id)
		ON DELETE SET NULL -- if a location is deleted the location here will be set to null, we dont want whole item record deleted
        ON UPDATE CASCADE,

	CONSTRAINT category_id_fk FOREIGN KEY (category_id) REFERENCES category(category_id)
		ON DELETE SET NULL
        ON UPDATE CASCADE


)auto_increment = 1;


CREATE table product
(
	item_id int primary key,
    quantity int not null,
    brand varchar(100),

    CONSTRAINT product_id_fk FOREIGN KEY (item_id) REFERENCES item(item_id)
		ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE table service
(
	item_id int primary key,
    duration_minutes int not null,

    CONSTRAINT service_id_fk FOREIGN KEY (item_id) REFERENCES item(item_id)
		ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE table request
(
	item_id int primary key,
    deadline date not null,

	CONSTRAINT request_id_fk FOREIGN KEY (item_id) REFERENCES item(item_id)
		ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE table transaction
(
	transaction_id int primary key auto_increment,
    buyer_id int,
    seller_id int,
    -- payment_type varchar(100),
    -- cost double,
    item_id int,

    CONSTRAINT item_id_fk FOREIGN KEY (item_id) REFERENCES item(item_id)
		ON DELETE SET NULL
        ON UPDATE CASCADE,

    CONSTRAINT buyer_id_fk FOREIGN KEY (buyer_id) REFERENCES user_archive(user_id)
		ON DELETE SET NULL
        ON UPDATE CASCADE,

	CONSTRAINT seller_id_fk FOREIGN KEY (seller_id) REFERENCES user_archive(user_id)
		ON DELETE SET NULL
        ON UPDATE CASCADE

)auto_increment = 1;

CREATE table item_subscriptions
(
	item_id int,
    user_id int,

    CONSTRAINT item_subscriptions_id PRIMARY KEY (item_id, user_id),

    CONSTRAINT item_subscriptions_fk FOREIGN KEY (item_id) REFERENCES item(item_id)
		ON DELETE CASCADE
        ON UPDATE CASCADE,

	CONSTRAINT user_item_subscriber_fk FOREIGN KEY (user_id) REFERENCES user(user_id)
		ON DELETE CASCADE
        ON UPDATE CASCADE

);

CREATE table user_subscriptions
(
	user_id int,
    subscriber_id int,

    CONSTRAINT user_subscriptions_id PRIMARY KEY (user_id, subscriber_id),

	CONSTRAINT user_subscriptions_fk FOREIGN KEY (user_id) REFERENCES user(user_id)
		ON DELETE CASCADE
        ON UPDATE CASCADE,

	CONSTRAINT subscriber_fk FOREIGN KEY (subscriber_id) REFERENCES user(user_id)
		ON DELETE CASCADE
        ON UPDATE CASCADE

);

CREATE TABLE rating
(
    id INT PRIMARY KEY AUTO_INCREMENT,
    score DOUBLE NOT NULL,
    user_id INT,
    CONSTRAINT rating_user_fk FOREIGN KEY (user_id) REFERENCES user(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
) AUTO_INCREMENT = 1;



--
-- ----------------------------------------------------------------------------------------------------------------------------
-- TRIGGERS


DELIMITER $$
CREATE TRIGGER archive_user
	AFTER INSERT ON user
    FOR EACH ROW
BEGIN
	INSERT INTO user_archive VALUES
    (NEW.user_id, NEW.first_name, NEW.last_name, NEW.email, NEW.username, NEW.average_rating, true);
END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER update_archive_user_on_delete
	BEFORE DELETE ON user
    FOR EACH ROW
BEGIN
	UPDATE user_archive
    SET is_active = false
    WHERE user_id = OLD.user_id;
END $$
DELIMITER ;





--
-- ------------------------------------------------------------------------------------------------------------------------------
-- PROCEDURES



DELIMITER $$
CREATE PROCEDURE soft_delete_item(IN id INT)
BEGIN
    UPDATE item
    SET available = false
    WHERE item_id = id;
END $$
DELIMITER ;




--
-- ----------------------------------------------------------------------------------------------------------------------------
-- TEST INSERTS


-- üåç LOCATIONS
INSERT INTO location (name, address, latitude, longitude) VALUES
('Library', '577 Western Ave, Westfield, MA', 42.132788, -72.796107),
('New Hall', 'Dorm A, Westfield State University', 42.131639, -72.792583),
('DC', 'Campus Center, Westfield MA', 42.131885, -72.795549),
('Gym', 'Recreation Center, Westfield MA', 42.133139, -72.796361);

-- üóÇÔ∏è CATEGORIES
INSERT INTO category (name) VALUES
('Electronics'),
('Textbooks'),
('Tutoring'),
('Moving Help'),
('Furniture');

-- üë§ USERS
INSERT INTO user (first_name, last_name, email, username, average_rating, password) VALUES
('Alice', 'Smith', 'alice@campus.edu', 'alice123', 3.33, 'passAlice'),
('Bob', 'Johnson', 'bob@campus.edu', 'bobbyJ', 4.69, 'passBob'),
('Charlie', 'Lee', 'charlie@campus.edu', 'charlieL', 4.50, 'passCharlie'),
('Diana', 'Miller', 'diana@campus.edu', 'dianaM', 5.1, 'passDiana');

-- üì¶ ITEMS (MIXED TYPES)
-- Product: Calculator
INSERT INTO item (name, description, price, user_id, category_id, available, location_id, item_type, image_name, image_type, image_date)
VALUES ('TI-84 Calculator', 'Gently used graphing calculator.', 45.00, 1, 1, 0, 1, 'product', 'calc.jpg', 'image/jpeg', NULL);

-- Product: Desk Chair
INSERT INTO item (name, description, price, user_id, category_id, available, location_id, item_type, image_name, image_type, image_date)
VALUES ('Desk Chair', 'Comfortable ergonomic chair.', 20.00, 2, 5, 0, 2, 'product', 'chair.jpg', 'image/jpeg', NULL);

-- Service: Math Tutoring
INSERT INTO item (name, description, price, user_id, category_id, available, location_id, item_type, image_name, image_type, image_date)
VALUES ('Math Tutoring', '1-hour session of calculus tutoring.', 25.00, 3, 3, 0, 3, 'service', 'tutor.png', 'image/png', NULL);

-- Service: Moving Help
INSERT INTO item (name, description, price, user_id, category_id, available, location_id, item_type, image_name, image_type, image_date)
VALUES ('Moving Help', 'Help moving into dorm.', 30.00, 4, 4, 1, 4, 'service', 'moving.jpg', 'image/jpeg', NULL);

-- Request: Need Desk
INSERT INTO item (name, description, price, user_id, category_id, available, location_id, item_type, image_name, image_type, image_date)
VALUES ('Need a Desk', 'Looking to buy a cheap desk.', 50.00, 1, 5, 1, 1, 'request', 'desk.jpg', 'image/jpeg', NULL);

-- Request: Study Group
INSERT INTO item (name, description, price, user_id, category_id, available, location_id, item_type, image_name, image_type, image_date)
VALUES ('Study Partner Needed', 'Need help studying for CS exam.', 0.00, 1, 3, 1, 2, 'request', 'study.jpg', 'image/jpeg', NULL);

-- üõ†Ô∏è PRODUCTS (for product items only)
INSERT INTO product (item_id, quantity, brand) VALUES
(1, 1, 'Texas Instruments'),  -- TI-84 Calculator
(2, 1, 'IKEA');               -- Desk Chair

-- üõ†Ô∏è SERVICES
INSERT INTO service (item_id, duration_minutes) VALUES
(3, 60),  -- Math Tutoring
(4, 90);  -- Moving Help

-- üõ†Ô∏è REQUESTS
INSERT INTO request (item_id, deadline) VALUES
(5, '2025-04-20'),  -- Need a Desk
(6, '2025-04-15');  -- Study Group



-- üí∏ TRANSACTIONS
INSERT INTO transaction (buyer_id, seller_id, item_id) VALUES
(3, 1, 1),  -- Charlie bought calculator from Alice
(4, 2, 3), -- Diana paid Bob for tutoring
(1, 2, 2); -- Alice paid Bob for moving help

-- üîî ITEM SUBSCRIPTIONS
INSERT INTO item_subscriptions (item_id, user_id) VALUES
(1, 2),  -- Bob subscribes to calculator
(2, 3),  -- Charlie subscribes to desk chair
(3, 1),  -- Alice subscribes to tutoring
(5, 4);  -- Diana subscribes to desk request

-- üßë‚Äçü§ù‚Äçüßë USER SUBSCRIPTIONS
INSERT INTO user_subscriptions (user_id, subscriber_id) VALUES
(1, 2),  -- Bob subscribes to Alice
(2, 3),  -- Charlie subscribes to Bob
(3, 1),  -- Alice subscribes to Charlie
(4, 1);  -- Diana subscribes to Alice


-- USER RATINGS
-- Alice (3.33 avg)
INSERT INTO rating (user_id, score) VALUES (1, 3.0);
INSERT INTO rating (user_id, score) VALUES (1, 3.0);
INSERT INTO rating (user_id, score) VALUES (1, 4.0);

-- Bob (4.69 avg)
INSERT INTO rating (user_id, score) VALUES (2, 4.5);
INSERT INTO rating (user_id, score) VALUES (2, 5.0);
INSERT INTO rating (user_id, score) VALUES (2, 4.58);

-- Charlie (4.50 avg)
INSERT INTO rating (user_id, score) VALUES (3, 4.0);
INSERT INTO rating (user_id, score) VALUES (3, 5.0);

-- Diana (4.9 avg)
INSERT INTO rating (user_id, score) VALUES (4, 4.9);